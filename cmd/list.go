package cmd

import (
	"fmt"
	"github.com/spf13/cobra"
	"github.com/zen-flo/todo-cli/internal/storage"
	"github.com/zen-flo/todo-cli/internal/task"
	"os"
	"sort"
	"time"
)

// formatStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π —Å–∏–º–≤–æ–ª —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.
// ‚úÖ –∑–µ–ª—ë–Ω—ã–π ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, ‚ùå –∫—Ä–∞—Å–Ω—ã–π ‚Äî –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ
func formatStatus(completed bool) string {
	if completed {
		return "\033[32m‚úÖ\033[0m"
	}
	return "\033[31m‚ùå\033[0m"
}

// formatTaskTitle —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–∫–∏ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É.
// üî• ‚Äî –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, ‚è∞ ‚Äî –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
func formatTaskTitle(t task.Task) string {
	title := t.Title

	if t.Important {
		title = "üî• " + title
	}

	if !t.Completed && time.Since(t.CreatedAt) > 7*24*time.Hour {
		// –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ ‚Äî –∂—ë–ª—Ç—ã–π —Ü–≤–µ—Ç
		title = "\033[33m" + title + "\033[0m"
	}

	return title
}

// printTasksTable –≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –∏ —Ü–≤–µ—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
func printTasksTable(tasks []task.Task) {
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
	fmt.Printf("\033[36m%-4s %-7s %-20s %-16s\033[0m\n", "ID", "STATUS", "TITLE", "CREATED AT")
	fmt.Println("-----------------------------------------------")

	// –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	for _, t := range tasks {
		status := "‚ùå"
		if t.Completed {
			status = "‚úÖ"
		}
		fmt.Printf("%-4d %-7s %-20s %-16s\n",
			t.ID,
			status,
			t.Title,
			t.CreatedAt.Format("2006-01-02 15:04"),
		)
	}
}

// listCmd ‚Äî –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞ "list", –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏.
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ --sort=name/date
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
//
//	todo list
var listCmd = &cobra.Command{
	Use:   "list",                // —Ñ–æ—Ä–º–∞—Ç –≤—ã–∑–æ–≤–∞
	Short: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏", // –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
	Run: func(cmd *cobra.Command, args []string) {
		// –°–æ–∑–¥–∞—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
		store := storage.NewJSONStore("tasks.json")

		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
		tasks, err := store.ListTasks()
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:", err)
			return
		}

		if len(tasks) == 0 {
			fmt.Println("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é: todo add \"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\"")
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥–∏
		sortBy, _ := cmd.Flags().GetString("sort")   //—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: name, date
		filter, _ := cmd.Flags().GetString("filter") // —Ñ–∏–ª—å—Ç—Ä: all, pending, completed

		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
		filtered := make([]task.Task, 0)
		for _, t := range tasks {
			switch filter {
			case "pending":
				if !t.Completed {
					filtered = append(filtered, t)
				}
			case "completed":
				if t.Completed {
					filtered = append(filtered, t)
				}
			default:
				filtered = append(filtered, t)
			}
		}

		// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á
		switch sortBy {
		case "name":
			sort.Slice(tasks, func(i, j int) bool {
				return tasks[i].Title < tasks[j].Title
			})
		case "date":
			sort.Slice(tasks, func(i, j int) bool {
				return tasks[i].CreatedAt.Before(tasks[j].CreatedAt)
			})
		case "":
			// –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
		default:
			fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ name –∏–ª–∏ date.")
			os.Exit(1)
		}

		// –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
		fmt.Printf("%-4s %-7s %-25s %s\n", "ID", "Status", "Title", "CreatedAt")
		fmt.Println("------------------------------------------------------------")

		for _, t := range tasks {
			fmt.Printf("%-4d %-7s %-30s %s\n",
				t.ID,
				formatStatus(t.Completed),
				formatTaskTitle(t),
				t.CreatedAt.Format("2006-01-02 15:04"),
			)
		}
	},
}

// init –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
// –ó–¥–µ—Å—å –º—ã –ø–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–¥–∫–æ–º–∞–Ω–¥—É "list" –∫ rootCmd.
func init() {
	rootCmd.AddCommand(listCmd)
	// –§–ª–∞–≥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	listCmd.Flags().StringP("sort", "s", "", "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: name –∏–ª–∏ date")
	listCmd.Flags().StringP("filter", "f", "all", "–§–∏–ª—å—Ç—Ä: all, pending, completed")
}
